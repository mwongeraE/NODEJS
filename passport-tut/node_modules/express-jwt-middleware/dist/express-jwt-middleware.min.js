(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jsonwebtoken"));
	else if(typeof define === 'function' && define.amd)
		define(["jsonwebtoken"], factory);
	else if(typeof exports === 'object')
		exports["jwtMiddleware"] = factory(require("jsonwebtoken"));
	else
		root["jwtMiddleware"] = factory(root["jsonwebtoken"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

const jwt = __webpack_require__(1);
const fs = __webpack_require__(2);

let secretOrCert, options = null;

/**
 * Express middleware function
 * @param {object} req 
 * @param {object} res 
 * @param {function} next 
 */
const middlewareFunc = (req, res, next) => {
    const token = clearToken(req.headers.authorization);
  
    jwt.verify(token, secretOrCert, options, (err, decoded) => {
        if (err) {
            res.status(403).json(isEmpty(err) ? { message: 'Wrong token!' } : err);
        } else {
            req.tokenData = decoded;
            next();
        }
    });
};

/**
 * Remove unrelated string in token like Bearer.
 * @param {string} token 
 */
const clearToken = (token) => {
    if (/\s/g.test(token)) {
        return token.split(' ')[1];
    } else {
        return token;
    }
};

/**
 * Read cert file from a path.
 * @param {string} path 
 */
const bufferCert = (path) => {
    try {
        return fs.readFileSync(path);
    } catch (error) {
        throw new Error('Public Certificate file is missing!');
    }
};

module.exports = (opt) => {
    if (!opt) {
        throw new Error('Please provide secret for jwt middleware at least!');
    }

    secretOrCert = (typeof opt === "string")
                    ? opt 
                    : opt.hasOwnProperty('secret')
                        ? opt.secret
                        : bufferCert(opt.cert);

    options = opt;
    return middlewareFunc;
};

/**
 * Check if object is empty
 * @param {object} obj
 */
function isEmpty(obj) {
    return Object.keys(obj).length === 0;
}


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ })
/******/ ]);
});